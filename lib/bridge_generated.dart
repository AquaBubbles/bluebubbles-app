// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.75.3.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import "bridge_definitions.dart";
import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';

import 'dart:ffi' as ffi;

class NativeLibImpl implements NativeLib {
  final NativeLibPlatform _platform;
  factory NativeLibImpl(ExternalLibrary dylib) =>
      NativeLibImpl.raw(NativeLibPlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory NativeLibImpl.wasm(FutureOr<WasmModule> module) =>
      NativeLibImpl(module as ExternalLibrary);
  NativeLibImpl.raw(this._platform);
  Future<PushState> newPushState({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_newPushState(port_),
      parseSuccessData: _wire2api_PushState,
      constMeta: kNewPushStateConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kNewPushStateConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "newPushState",
        argNames: [],
      );

  Future<List<String>> getHandles({required PushState state, dynamic hint}) {
    var arg0 = _platform.api2wire_PushState(state);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_get_handles(port_, arg0),
      parseSuccessData: _wire2api_StringList,
      constMeta: kGetHandlesConstMeta,
      argValues: [state],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetHandlesConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_handles",
        argNames: ["state"],
      );

  Future<List<String>> validateTargets(
      {required PushState state, required List<String> targets, dynamic hint}) {
    var arg0 = _platform.api2wire_PushState(state);
    var arg1 = _platform.api2wire_StringList(targets);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_validate_targets(port_, arg0, arg1),
      parseSuccessData: _wire2api_StringList,
      constMeta: kValidateTargetsConstMeta,
      argValues: [state, targets],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kValidateTargetsConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "validate_targets",
        argNames: ["state", "targets"],
      );

  Future<void> cancelRegistration({required PushState state, dynamic hint}) {
    var arg0 = _platform.api2wire_PushState(state);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_cancel_registration(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kCancelRegistrationConstMeta,
      argValues: [state],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCancelRegistrationConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "cancel_registration",
        argNames: ["state"],
      );

  Future<int> getPhase({required PushState state, dynamic hint}) {
    var arg0 = _platform.api2wire_PushState(state);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_get_phase(port_, arg0),
      parseSuccessData: _wire2api_u64,
      constMeta: kGetPhaseConstMeta,
      argValues: [state],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetPhaseConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_phase",
        argNames: ["state"],
      );

  Future<void> restore(
      {required PushState currState, required String data, dynamic hint}) {
    var arg0 = _platform.api2wire_PushState(currState);
    var arg1 = _platform.api2wire_String(data);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_restore(port_, arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kRestoreConstMeta,
      argValues: [currState, data],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRestoreConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "restore",
        argNames: ["currState", "data"],
      );

  Future<void> newPush({required PushState state, dynamic hint}) {
    var arg0 = _platform.api2wire_PushState(state);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_new_push(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kNewPushConstMeta,
      argValues: [state],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kNewPushConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "new_push",
        argNames: ["state"],
      );

  Future<int> tryAuth(
      {required PushState state,
      required String username,
      required String password,
      dynamic hint}) {
    var arg0 = _platform.api2wire_PushState(state);
    var arg1 = _platform.api2wire_String(username);
    var arg2 = _platform.api2wire_String(password);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_try_auth(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_u64,
      constMeta: kTryAuthConstMeta,
      argValues: [state, username, password],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kTryAuthConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "try_auth",
        argNames: ["state", "username", "password"],
      );

  Future<int> registerIds(
      {required PushState state,
      required String validationData,
      dynamic hint}) {
    var arg0 = _platform.api2wire_PushState(state);
    var arg1 = _platform.api2wire_String(validationData);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_register_ids(port_, arg0, arg1),
      parseSuccessData: _wire2api_u64,
      constMeta: kRegisterIdsConstMeta,
      argValues: [state, validationData],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRegisterIdsConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "register_ids",
        argNames: ["state", "validationData"],
      );

  Future<String> savePush({required PushState state, dynamic hint}) {
    var arg0 = _platform.api2wire_PushState(state);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_save_push(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kSavePushConstMeta,
      argValues: [state],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSavePushConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "save_push",
        argNames: ["state"],
      );

  DropFnType get dropOpaquePushState => _platform.inner.drop_opaque_PushState;
  ShareFnType get shareOpaquePushState =>
      _platform.inner.share_opaque_PushState;
  OpaqueTypeFinalizer get PushStateFinalizer => _platform.PushStateFinalizer;

  void dispose() {
    _platform.dispose();
  }
// Section: wire2api

  PushState _wire2api_PushState(dynamic raw) {
    return PushState.fromRaw(raw[0], raw[1], this);
  }

  String _wire2api_String(dynamic raw) {
    return raw as String;
  }

  List<String> _wire2api_StringList(dynamic raw) {
    return (raw as List<dynamic>).cast<String>();
  }

  int _wire2api_u64(dynamic raw) {
    return castInt(raw);
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }

  void _wire2api_unit(dynamic raw) {
    return;
  }
}

// Section: api2wire

@protected
int api2wire_u8(int raw) {
  return raw;
}

// Section: finalizer

class NativeLibPlatform extends FlutterRustBridgeBase<NativeLibWire> {
  NativeLibPlatform(ffi.DynamicLibrary dylib) : super(NativeLibWire(dylib));

// Section: api2wire

  @protected
  wire_PushState api2wire_PushState(PushState raw) {
    final ptr = inner.new_PushState();
    _api_fill_to_wire_PushState(raw, ptr);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_String(String raw) {
    return api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<wire_StringList> api2wire_StringList(List<String> raw) {
    final ans = inner.new_StringList_0(raw.length);
    for (var i = 0; i < raw.length; i++) {
      ans.ref.ptr[i] = api2wire_String(raw[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }
// Section: finalizer

  late final OpaqueTypeFinalizer _PushStateFinalizer =
      OpaqueTypeFinalizer(inner._drop_opaque_PushStatePtr);
  OpaqueTypeFinalizer get PushStateFinalizer => _PushStateFinalizer;
// Section: api_fill_to_wire

  void _api_fill_to_wire_PushState(PushState apiObj, wire_PushState wireObj) {
    wireObj.ptr = apiObj.shareOrMove();
  }
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint

/// generated by flutter_rust_bridge
class NativeLibWire implements FlutterRustBridgeWireBase {
  @internal
  late final dartApi = DartApiDl(init_frb_dart_api_dl);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeLibWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeLibWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();

  Object get_dart_object(
    int ptr,
  ) {
    return _get_dart_object(
      ptr,
    );
  }

  late final _get_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.UintPtr)>>(
          'get_dart_object');
  late final _get_dart_object =
      _get_dart_objectPtr.asFunction<Object Function(int)>();

  void drop_dart_object(
    int ptr,
  ) {
    return _drop_dart_object(
      ptr,
    );
  }

  late final _drop_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UintPtr)>>(
          'drop_dart_object');
  late final _drop_dart_object =
      _drop_dart_objectPtr.asFunction<void Function(int)>();

  int new_dart_opaque(
    Object handle,
  ) {
    return _new_dart_opaque(
      handle,
    );
  }

  late final _new_dart_opaquePtr =
      _lookup<ffi.NativeFunction<ffi.UintPtr Function(ffi.Handle)>>(
          'new_dart_opaque');
  late final _new_dart_opaque =
      _new_dart_opaquePtr.asFunction<int Function(Object)>();

  int init_frb_dart_api_dl(
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _init_frb_dart_api_dl(
      obj,
    );
  }

  late final _init_frb_dart_api_dlPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>(
          'init_frb_dart_api_dl');
  late final _init_frb_dart_api_dl = _init_frb_dart_api_dlPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void wire_newPushState(
    int port_,
  ) {
    return _wire_newPushState(
      port_,
    );
  }

  late final _wire_newPushStatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_newPushState');
  late final _wire_newPushState =
      _wire_newPushStatePtr.asFunction<void Function(int)>();

  void wire_get_handles(
    int port_,
    wire_PushState state,
  ) {
    return _wire_get_handles(
      port_,
      state,
    );
  }

  late final _wire_get_handlesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, wire_PushState)>>(
          'wire_get_handles');
  late final _wire_get_handles =
      _wire_get_handlesPtr.asFunction<void Function(int, wire_PushState)>();

  void wire_validate_targets(
    int port_,
    wire_PushState state,
    ffi.Pointer<wire_StringList> targets,
  ) {
    return _wire_validate_targets(
      port_,
      state,
      targets,
    );
  }

  late final _wire_validate_targetsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, wire_PushState,
              ffi.Pointer<wire_StringList>)>>('wire_validate_targets');
  late final _wire_validate_targets = _wire_validate_targetsPtr.asFunction<
      void Function(int, wire_PushState, ffi.Pointer<wire_StringList>)>();

  void wire_cancel_registration(
    int port_,
    wire_PushState state,
  ) {
    return _wire_cancel_registration(
      port_,
      state,
    );
  }

  late final _wire_cancel_registrationPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, wire_PushState)>>(
          'wire_cancel_registration');
  late final _wire_cancel_registration = _wire_cancel_registrationPtr
      .asFunction<void Function(int, wire_PushState)>();

  void wire_get_phase(
    int port_,
    wire_PushState state,
  ) {
    return _wire_get_phase(
      port_,
      state,
    );
  }

  late final _wire_get_phasePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, wire_PushState)>>(
          'wire_get_phase');
  late final _wire_get_phase =
      _wire_get_phasePtr.asFunction<void Function(int, wire_PushState)>();

  void wire_restore(
    int port_,
    wire_PushState curr_state,
    ffi.Pointer<wire_uint_8_list> data,
  ) {
    return _wire_restore(
      port_,
      curr_state,
      data,
    );
  }

  late final _wire_restorePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, wire_PushState,
              ffi.Pointer<wire_uint_8_list>)>>('wire_restore');
  late final _wire_restore = _wire_restorePtr.asFunction<
      void Function(int, wire_PushState, ffi.Pointer<wire_uint_8_list>)>();

  void wire_new_push(
    int port_,
    wire_PushState state,
  ) {
    return _wire_new_push(
      port_,
      state,
    );
  }

  late final _wire_new_pushPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, wire_PushState)>>(
          'wire_new_push');
  late final _wire_new_push =
      _wire_new_pushPtr.asFunction<void Function(int, wire_PushState)>();

  void wire_try_auth(
    int port_,
    wire_PushState state,
    ffi.Pointer<wire_uint_8_list> username,
    ffi.Pointer<wire_uint_8_list> password,
  ) {
    return _wire_try_auth(
      port_,
      state,
      username,
      password,
    );
  }

  late final _wire_try_authPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              wire_PushState,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_try_auth');
  late final _wire_try_auth = _wire_try_authPtr.asFunction<
      void Function(int, wire_PushState, ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>)>();

  void wire_register_ids(
    int port_,
    wire_PushState state,
    ffi.Pointer<wire_uint_8_list> validation_data,
  ) {
    return _wire_register_ids(
      port_,
      state,
      validation_data,
    );
  }

  late final _wire_register_idsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, wire_PushState,
              ffi.Pointer<wire_uint_8_list>)>>('wire_register_ids');
  late final _wire_register_ids = _wire_register_idsPtr.asFunction<
      void Function(int, wire_PushState, ffi.Pointer<wire_uint_8_list>)>();

  void wire_save_push(
    int port_,
    wire_PushState state,
  ) {
    return _wire_save_push(
      port_,
      state,
    );
  }

  late final _wire_save_pushPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, wire_PushState)>>(
          'wire_save_push');
  late final _wire_save_push =
      _wire_save_pushPtr.asFunction<void Function(int, wire_PushState)>();

  wire_PushState new_PushState() {
    return _new_PushState();
  }

  late final _new_PushStatePtr =
      _lookup<ffi.NativeFunction<wire_PushState Function()>>('new_PushState');
  late final _new_PushState =
      _new_PushStatePtr.asFunction<wire_PushState Function()>();

  ffi.Pointer<wire_StringList> new_StringList_0(
    int len,
  ) {
    return _new_StringList_0(
      len,
    );
  }

  late final _new_StringList_0Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_StringList> Function(ffi.Int32)>>(
      'new_StringList_0');
  late final _new_StringList_0 = _new_StringList_0Ptr
      .asFunction<ffi.Pointer<wire_StringList> Function(int)>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_0(
    int len,
  ) {
    return _new_uint_8_list_0(
      len,
    );
  }

  late final _new_uint_8_list_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_uint_8_list> Function(
              ffi.Int32)>>('new_uint_8_list_0');
  late final _new_uint_8_list_0 = _new_uint_8_list_0Ptr
      .asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  void drop_opaque_PushState(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_PushState(
      ptr,
    );
  }

  late final _drop_opaque_PushStatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'drop_opaque_PushState');
  late final _drop_opaque_PushState = _drop_opaque_PushStatePtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_PushState(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_PushState(
      ptr,
    );
  }

  late final _share_opaque_PushStatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>)>>('share_opaque_PushState');
  late final _share_opaque_PushState = _share_opaque_PushStatePtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void free_WireSyncReturn(
    WireSyncReturn ptr,
  ) {
    return _free_WireSyncReturn(
      ptr,
    );
  }

  late final _free_WireSyncReturnPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturn)>>(
          'free_WireSyncReturn');
  late final _free_WireSyncReturn =
      _free_WireSyncReturnPtr.asFunction<void Function(WireSyncReturn)>();
}

class _Dart_Handle extends ffi.Opaque {}

class wire_PushState extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

class wire_StringList extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<wire_uint_8_list>> ptr;

  @ffi.Int32()
  external int len;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Bool Function(DartPort port_id, ffi.Pointer<ffi.Void> message)>>;
typedef DartPort = ffi.Int64;
